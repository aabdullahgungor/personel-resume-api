// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interfaces/university_repository_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/aabdullahgungor/personal-resume-api/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIUniversityRepository is a mock of IUniversityRepository interface.
type MockIUniversityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUniversityRepositoryMockRecorder
}

// MockIUniversityRepositoryMockRecorder is the mock recorder for MockIUniversityRepository.
type MockIUniversityRepositoryMockRecorder struct {
	mock *MockIUniversityRepository
}

// NewMockIUniversityRepository creates a new mock instance.
func NewMockIUniversityRepository(ctrl *gomock.Controller) *MockIUniversityRepository {
	mock := &MockIUniversityRepository{ctrl: ctrl}
	mock.recorder = &MockIUniversityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUniversityRepository) EXPECT() *MockIUniversityRepositoryMockRecorder {
	return m.recorder
}

// CreateUniversity mocks base method.
func (m *MockIUniversityRepository) CreateUniversity(university *model.University) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUniversity", university)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUniversity indicates an expected call of CreateUniversity.
func (mr *MockIUniversityRepositoryMockRecorder) CreateUniversity(university interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUniversity", reflect.TypeOf((*MockIUniversityRepository)(nil).CreateUniversity), university)
}

// DeleteUniversity mocks base method.
func (m *MockIUniversityRepository) DeleteUniversity(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUniversity", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUniversity indicates an expected call of DeleteUniversity.
func (mr *MockIUniversityRepositoryMockRecorder) DeleteUniversity(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUniversity", reflect.TypeOf((*MockIUniversityRepository)(nil).DeleteUniversity), id)
}

// EditUniversity mocks base method.
func (m *MockIUniversityRepository) EditUniversity(university *model.University) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUniversity", university)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUniversity indicates an expected call of EditUniversity.
func (mr *MockIUniversityRepositoryMockRecorder) EditUniversity(university interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUniversity", reflect.TypeOf((*MockIUniversityRepository)(nil).EditUniversity), university)
}

// GetAllUniversities mocks base method.
func (m *MockIUniversityRepository) GetAllUniversities() ([]model.University, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUniversities")
	ret0, _ := ret[0].([]model.University)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUniversities indicates an expected call of GetAllUniversities.
func (mr *MockIUniversityRepositoryMockRecorder) GetAllUniversities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUniversities", reflect.TypeOf((*MockIUniversityRepository)(nil).GetAllUniversities))
}

// GetUniversityById mocks base method.
func (m *MockIUniversityRepository) GetUniversityById(id int) (model.University, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUniversityById", id)
	ret0, _ := ret[0].(model.University)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUniversityById indicates an expected call of GetUniversityById.
func (mr *MockIUniversityRepositoryMockRecorder) GetUniversityById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUniversityById", reflect.TypeOf((*MockIUniversityRepository)(nil).GetUniversityById), id)
}
