// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interfaces/ability_repository_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/aabdullahgungor/personal-resume-api/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIAbilityRepository is a mock of IAbilityRepository interface.
type MockIAbilityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAbilityRepositoryMockRecorder
}

// MockIAbilityRepositoryMockRecorder is the mock recorder for MockIAbilityRepository.
type MockIAbilityRepositoryMockRecorder struct {
	mock *MockIAbilityRepository
}

// NewMockIAbilityRepository creates a new mock instance.
func NewMockIAbilityRepository(ctrl *gomock.Controller) *MockIAbilityRepository {
	mock := &MockIAbilityRepository{ctrl: ctrl}
	mock.recorder = &MockIAbilityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAbilityRepository) EXPECT() *MockIAbilityRepositoryMockRecorder {
	return m.recorder
}

// CreateAbility mocks base method.
func (m *MockIAbilityRepository) CreateAbility(ability *model.Ability) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAbility", ability)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAbility indicates an expected call of CreateAbility.
func (mr *MockIAbilityRepositoryMockRecorder) CreateAbility(ability interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAbility", reflect.TypeOf((*MockIAbilityRepository)(nil).CreateAbility), ability)
}

// DeleteAbility mocks base method.
func (m *MockIAbilityRepository) DeleteAbility(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAbility", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAbility indicates an expected call of DeleteAbility.
func (mr *MockIAbilityRepositoryMockRecorder) DeleteAbility(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAbility", reflect.TypeOf((*MockIAbilityRepository)(nil).DeleteAbility), id)
}

// EditAbility mocks base method.
func (m *MockIAbilityRepository) EditAbility(ability *model.Ability) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditAbility", ability)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditAbility indicates an expected call of EditAbility.
func (mr *MockIAbilityRepositoryMockRecorder) EditAbility(ability interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditAbility", reflect.TypeOf((*MockIAbilityRepository)(nil).EditAbility), ability)
}

// GetAbilityById mocks base method.
func (m *MockIAbilityRepository) GetAbilityById(id int) (model.Ability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAbilityById", id)
	ret0, _ := ret[0].(model.Ability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAbilityById indicates an expected call of GetAbilityById.
func (mr *MockIAbilityRepositoryMockRecorder) GetAbilityById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAbilityById", reflect.TypeOf((*MockIAbilityRepository)(nil).GetAbilityById), id)
}

// GetAllAbilities mocks base method.
func (m *MockIAbilityRepository) GetAllAbilities() ([]model.Ability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAbilities")
	ret0, _ := ret[0].([]model.Ability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAbilities indicates an expected call of GetAllAbilities.
func (mr *MockIAbilityRepositoryMockRecorder) GetAllAbilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAbilities", reflect.TypeOf((*MockIAbilityRepository)(nil).GetAllAbilities))
}
