// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interfaces/personel_repository_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/aabdullahgungor/personal-resume-api/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIPersonalRepository is a mock of IPersonalRepository interface.
type MockIPersonalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPersonalRepositoryMockRecorder
}

// MockIPersonalRepositoryMockRecorder is the mock recorder for MockIPersonalRepository.
type MockIPersonalRepositoryMockRecorder struct {
	mock *MockIPersonalRepository
}

// NewMockIPersonalRepository creates a new mock instance.
func NewMockIPersonalRepository(ctrl *gomock.Controller) *MockIPersonalRepository {
	mock := &MockIPersonalRepository{ctrl: ctrl}
	mock.recorder = &MockIPersonalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPersonalRepository) EXPECT() *MockIPersonalRepositoryMockRecorder {
	return m.recorder
}

// CreatePersonal mocks base method.
func (m *MockIPersonalRepository) CreatePersonal(personal *model.Personal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePersonal", personal)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePersonal indicates an expected call of CreatePersonal.
func (mr *MockIPersonalRepositoryMockRecorder) CreatePersonal(personal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePersonal", reflect.TypeOf((*MockIPersonalRepository)(nil).CreatePersonal), personal)
}

// DeletePersonal mocks base method.
func (m *MockIPersonalRepository) DeletePersonal(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePersonal", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePersonal indicates an expected call of DeletePersonal.
func (mr *MockIPersonalRepositoryMockRecorder) DeletePersonal(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePersonal", reflect.TypeOf((*MockIPersonalRepository)(nil).DeletePersonal), id)
}

// EditPersonal mocks base method.
func (m *MockIPersonalRepository) EditPersonal(personal *model.Personal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPersonal", personal)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditPersonal indicates an expected call of EditPersonal.
func (mr *MockIPersonalRepositoryMockRecorder) EditPersonal(personal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPersonal", reflect.TypeOf((*MockIPersonalRepository)(nil).EditPersonal), personal)
}

// GetAllPersonals mocks base method.
func (m *MockIPersonalRepository) GetAllPersonals() ([]model.Personal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPersonals")
	ret0, _ := ret[0].([]model.Personal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPersonals indicates an expected call of GetAllPersonals.
func (mr *MockIPersonalRepositoryMockRecorder) GetAllPersonals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPersonals", reflect.TypeOf((*MockIPersonalRepository)(nil).GetAllPersonals))
}

// GetPersonalByEmail mocks base method.
func (m *MockIPersonalRepository) GetPersonalByEmail(email string) (model.Personal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonalByEmail", email)
	ret0, _ := ret[0].(model.Personal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonalByEmail indicates an expected call of GetPersonalByEmail.
func (mr *MockIPersonalRepositoryMockRecorder) GetPersonalByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonalByEmail", reflect.TypeOf((*MockIPersonalRepository)(nil).GetPersonalByEmail), email)
}

// GetPersonalById mocks base method.
func (m *MockIPersonalRepository) GetPersonalById(id int) (model.Personal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonalById", id)
	ret0, _ := ret[0].(model.Personal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonalById indicates an expected call of GetPersonalById.
func (mr *MockIPersonalRepositoryMockRecorder) GetPersonalById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonalById", reflect.TypeOf((*MockIPersonalRepository)(nil).GetPersonalById), id)
}
