// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/interfaces/personal_service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/aabdullahgungor/personal-resume-api/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIPersonalService is a mock of IPersonalService interface.
type MockIPersonalService struct {
	ctrl     *gomock.Controller
	recorder *MockIPersonalServiceMockRecorder
}

// MockIPersonalServiceMockRecorder is the mock recorder for MockIPersonalService.
type MockIPersonalServiceMockRecorder struct {
	mock *MockIPersonalService
}

// NewMockIPersonalService creates a new mock instance.
func NewMockIPersonalService(ctrl *gomock.Controller) *MockIPersonalService {
	mock := &MockIPersonalService{ctrl: ctrl}
	mock.recorder = &MockIPersonalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPersonalService) EXPECT() *MockIPersonalServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPersonalService) Create(personal *model.Personal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", personal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIPersonalServiceMockRecorder) Create(personal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPersonalService)(nil).Create), personal)
}

// Delete mocks base method.
func (m *MockIPersonalService) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIPersonalServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIPersonalService)(nil).Delete), id)
}

// Edit mocks base method.
func (m *MockIPersonalService) Edit(personal *model.Personal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", personal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockIPersonalServiceMockRecorder) Edit(personal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockIPersonalService)(nil).Edit), personal)
}

// GetAll mocks base method.
func (m *MockIPersonalService) GetAll() ([]model.Personal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Personal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIPersonalServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIPersonalService)(nil).GetAll))
}

// GetByEmail mocks base method.
func (m *MockIPersonalService) GetByEmail(email string) (model.Personal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(model.Personal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockIPersonalServiceMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockIPersonalService)(nil).GetByEmail), email)
}

// GetById mocks base method.
func (m *MockIPersonalService) GetById(id string) (model.Personal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(model.Personal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIPersonalServiceMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIPersonalService)(nil).GetById), id)
}
