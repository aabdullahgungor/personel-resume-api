// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/interfaces/university_service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/aabdullahgungor/personal-resume-api/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIUniversityService is a mock of IUniversityService interface.
type MockIUniversityService struct {
	ctrl     *gomock.Controller
	recorder *MockIUniversityServiceMockRecorder
}

// MockIUniversityServiceMockRecorder is the mock recorder for MockIUniversityService.
type MockIUniversityServiceMockRecorder struct {
	mock *MockIUniversityService
}

// NewMockIUniversityService creates a new mock instance.
func NewMockIUniversityService(ctrl *gomock.Controller) *MockIUniversityService {
	mock := &MockIUniversityService{ctrl: ctrl}
	mock.recorder = &MockIUniversityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUniversityService) EXPECT() *MockIUniversityServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUniversityService) Create(university *model.University) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", university)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUniversityServiceMockRecorder) Create(university interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUniversityService)(nil).Create), university)
}

// Delete mocks base method.
func (m *MockIUniversityService) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUniversityServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUniversityService)(nil).Delete), id)
}

// Edit mocks base method.
func (m *MockIUniversityService) Edit(university *model.University) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", university)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockIUniversityServiceMockRecorder) Edit(university interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockIUniversityService)(nil).Edit), university)
}

// GetAll mocks base method.
func (m *MockIUniversityService) GetAll() ([]model.University, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.University)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIUniversityServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIUniversityService)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockIUniversityService) GetById(id string) (model.University, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(model.University)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIUniversityServiceMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIUniversityService)(nil).GetById), id)
}
