// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/abilities": {
            "get": {
                "description": "Responds with the list of all abilities as JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "abilities"
                ],
                "summary": "Get abilities array",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Ability"
                        }
                    }
                }
            },
            "put": {
                "description": "Takes a ability JSON and edit an in DB. Return saved JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "abilities"
                ],
                "summary": "Edit an ability",
                "parameters": [
                    {
                        "description": "Ability JSON",
                        "name": "ability",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Ability"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Ability"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            },
            "post": {
                "description": "Takes a ability JSON and store in DB. Return saved JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "abilities"
                ],
                "summary": "Add a new ability",
                "parameters": [
                    {
                        "description": "Ability JSON",
                        "name": "ability",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Ability"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Ability"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            }
        },
        "/abilities/{id}": {
            "get": {
                "description": "Returns the ability whose id value matches the id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "abilities"
                ],
                "summary": "Get single ability by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search ability by id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Ability"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove an ability from DB by id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "abilities"
                ],
                "summary": "Delete an ability",
                "parameters": [
                    {
                        "type": "string",
                        "description": "delete ability by id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Ability"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            }
        },
        "/experiences": {
            "get": {
                "description": "Responds with the list of all experiences   as JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "experiences"
                ],
                "summary": "Get experiences   array",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Experience"
                        }
                    }
                }
            },
            "put": {
                "description": "Takes a experience  JSON and edit an in DB. Return saved JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "experiences"
                ],
                "summary": "Edit an experience",
                "parameters": [
                    {
                        "description": "Experience  JSON",
                        "name": "experience",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Experience"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Experience"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            },
            "post": {
                "description": "Takes a experience  JSON and store in DB. Return saved JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "experiences"
                ],
                "summary": "Add a new experience",
                "parameters": [
                    {
                        "description": "Experience  JSON",
                        "name": "experience",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Experience"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Experience"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            }
        },
        "/experiences/{id}": {
            "get": {
                "description": "Returns the experience whose id value matches the id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "experiences"
                ],
                "summary": "Get single experience by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search experience by id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Experience"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove an experience  from DB by id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "experiences"
                ],
                "summary": "Delete an experience",
                "parameters": [
                    {
                        "type": "string",
                        "description": "delete experience  by id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Experience"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            }
        },
        "/personals": {
            "get": {
                "description": "Responds with the list of all personals as JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "personals"
                ],
                "summary": "Get personals array",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Personal"
                        }
                    }
                }
            },
            "put": {
                "description": "Takes a personal JSON and edit an in DB. Return saved JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "personals"
                ],
                "summary": "Edit an personal",
                "parameters": [
                    {
                        "description": "Personal JSON",
                        "name": "personal",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Personal"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Personal"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            },
            "post": {
                "description": "Takes a personal JSON and store in DB. Return saved JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "personals"
                ],
                "summary": "Add a new personal",
                "parameters": [
                    {
                        "description": "Personal JSON",
                        "name": "personal",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Personal"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Personal"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            }
        },
        "/personals/{id}": {
            "get": {
                "description": "Returns the personal whose id value matches the id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "personals"
                ],
                "summary": "Get single personal by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search personal by id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Personal"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove an personal from DB by id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "personals"
                ],
                "summary": "Delete an personal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "delete personal by id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Personal"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            }
        },
        "/universities": {
            "get": {
                "description": "Responds with the list of all universities as JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "universities"
                ],
                "summary": "Get universities array",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.University"
                        }
                    }
                }
            },
            "put": {
                "description": "Takes a university JSON and edit an in DB. Return saved JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "universities"
                ],
                "summary": "Edit an university",
                "parameters": [
                    {
                        "description": "University JSON",
                        "name": "university",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.University"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.University"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            },
            "post": {
                "description": "Takes a university  JSON and store in DB. Return saved JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "universities"
                ],
                "summary": "Add a new university",
                "parameters": [
                    {
                        "description": "Ability JSON",
                        "name": "university",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.University"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.University"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            }
        },
        "/universities/{id}": {
            "get": {
                "description": "Returns the university  whose id value matches the id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "universities"
                ],
                "summary": "Get single university  by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search university  by id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.University"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove an university from DB by id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "universities"
                ],
                "summary": "Delete an university",
                "parameters": [
                    {
                        "type": "string",
                        "description": "delete university by id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.University"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Ability": {
            "type": "object",
            "properties": {
                "ability": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "personals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Personal"
                    }
                }
            }
        },
        "model.Experience": {
            "type": "object",
            "properties": {
                "company-name": {
                    "type": "string"
                },
                "finishyear": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "personal": {
                    "$ref": "#/definitions/model.Personal"
                },
                "personal_id": {
                    "type": "integer"
                },
                "position": {
                    "type": "string"
                },
                "startyear": {
                    "type": "string"
                }
            }
        },
        "model.Personal": {
            "type": "object",
            "properties": {
                "abilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Ability"
                    }
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                },
                "universities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.University"
                    }
                },
                "username": {
                    "type": "string"
                },
                "usertype": {
                    "type": "string"
                },
                "work_experiences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Experience"
                    }
                }
            }
        },
        "model.University": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "personals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Personal"
                    }
                },
                "university": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
